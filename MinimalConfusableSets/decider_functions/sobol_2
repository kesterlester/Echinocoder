"""
Sobol Sampling Option 2
------------------------
Generates n k-dimensional unit vectors using the Sobol low-discrepancy sequence.
Always uses Sobol's random_base2 method to generate 2^m â‰¥ n vectors,
then randomly removes excess vectors to obtain exactly n.
This might achieve better uniformity compared to falling back to random(n) as in sobol_1.

NEEDS TO RETURN B, NOT D
"""
from scipy.stats import qmc
import numpy as np

def generate_unit_vectors_sobol_2(n,k):
    sampler = qmc.Sobol(d=k, scramble = True)
    
    if not np.log2(n).is_integer(): 
        print("WARNING: Sobol vectors will be generated for the nearest power of \
2, then vectors will be randomly removed to reduce to n")
    
    m = np.ceil(np.log2(n)).astype(int)

    all_vectors = sampler.random_base2(m)
    
    num_removals = 2**m - n
    
    indices = np.random.choice(all_vectors.shape[0], size = n, replace = False)
    vectors = all_vectors[indices]
    
    norms = np.linalg.norm(vectors, axis=1, keepdims=True) 
    unit_vectors = vectors / norms
    print(f"{num_removals} vectors were randomly removed")
    return(unit_vectors)
    


