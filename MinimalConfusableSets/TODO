The max pivot position pruning part of the algorithm is wrong. It would be right if all vectors (even sums of vectors) were in general position, which the initial sets of bats are. However after the bottom row of constraints, the direction of the compound vector made by the bottom row constranits applied to the top row MAY not be in general position relative to the remaining untouched bats. Hence pivot positions need not jump left by k columns each time one goes up one row.  As a consequence, the derived number of max rows is wrong too, and should be either fixed or eliminated.  Even the first row is only correct because we test bats for being in general position before we start.  We could stop testing the bats for that, in which case then even the bottom constraint would be "wrong".  And it would be wronger still if we didn't even insist that bats were non-zero.  It may be helpful to cease to require that bats be in general position at the start, since (1) checeking this gets increasingly hard as M increases, even prohibitively so, and (2) it allows us to check the rest of the alg works even when bats are not in general position.  However, the lack of culling on robust row constraints COULD make things slow down even more, so a balance is required between bat creation time and search alg running time.  

M=11 k=5 disagrees for the without minus-ones vs with minus-ones versions.  Without makes 994, whereas with makes 992.

Note, also, that

VSLW AT END:  for M=10, k=2 the smallest confusable sets have size 192,
SLOW AT END:  for M=10, k=2 the smallest confusable sets have size 192,
FAST AT END:  for M=10, k=2 the smallest confusable sets have size 172,

with sigmas of 10000, 100, 10 resepectively.  So FAST bats were not good enough!


In Notes (apple) I have evidence that results are not reproducible. Currently assuming generation of B matrix or testing of collapse.

I could add a check of both the tom decider-function and the 'don't go deeper as the rre is already as tall as it can be' functions by turning the latter test on and off and checking that the matrices generated are the same in both cases (albeit slower to generate in one case).

Possibly we can change the sign of any COLUMN of any match matrix (eqivalent to reversing the direction of its wi vec) to increase the number of hash hits.

Can we also sort the columns (excluding the pivot columns and sort the rows to also increase hash hits?


